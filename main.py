import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    FSInputFile, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import BOT_TOKEN
import os
from database import get_latest_schedule  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from admin import admin_router

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
dp.include_router(admin_router)

class UserState(StatesGroup):
    WAITING_SECTION = State()

def load_section_text(section_name):
    try:
        file_path = os.path.join("texts", f"{section_name}.txt")
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        return f"–†–∞–∑–¥–µ–ª '{section_name}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

def get_section_keyboard(section_name):
    buttons = [
        [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{section_name}")],
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"register_{section_name}")],
        [InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"schedule_{section_name}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_main_keyboard():
    buttons = [
        [
            KeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
            KeyboardButton(text="üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"),
            KeyboardButton(text="üë• –ì—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        ],
        [
            KeyboardButton(text="üè´ –ö—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö"),
            KeyboardButton(text="üé§ –õ–µ–∫—Ç–æ—Ä–∏–π"),
            KeyboardButton(text="üé¨ –ö–∏–Ω–æ–∫–ª—É–±")
        ],
        [
            KeyboardButton(text="üí¨ –ü—Å–∏—Ö. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"),
            KeyboardButton(text="üåê –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"),
            KeyboardButton(text="üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏")
        ],
        [
            KeyboardButton(text="üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"),
            KeyboardButton(text="üì© –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üë®üíº")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()
    photo = FSInputFile("images/logo.jpg")
    await message.answer_photo(photo, caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_keyboard())

@dp.message(F.text.in_([
    "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    "üë• –ì—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", "üè´ –ö—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö", "üé§ –õ–µ–∫—Ç–æ—Ä–∏–π",
    "üé¨ –ö–∏–Ω–æ–∫–ª—É–±", "üí¨ –ü—Å–∏—Ö. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", "üåê –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
    "üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏", "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
]))
async def handle_any_section(message: types.Message, state: FSMContext):
    section_mapping = {
        "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è": "–±–ª–∏–∂–∞–π—à–∏–µ_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ_–ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "üë• –ì—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤": "–≥—Ä—É–ø–ø—ã_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "üè´ –ö—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö": "–∫—É—Ä—Å—ã_–¥–ª—è_–≤—Å–µ—Ö",
        "üé§ –õ–µ–∫—Ç–æ—Ä–∏–π": "–ª–µ–∫—Ç–æ—Ä–∏–π",
        "üé¨ –ö–∏–Ω–æ–∫–ª—É–±": "–∫–∏–Ω–æ–∫–ª—É–±",
        "üí¨ –ü—Å–∏—Ö. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏": "–ø—Å–∏—Ö_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        "üåê –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏": "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        "üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏": "–ø—Ä–æ–µ–∫—Ç—ã_–∞–∫–∞–¥–µ–º–∏–∏",
        "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞_–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    }
    
    section_name = section_mapping[message.text]
    text = load_section_text(section_name)
    await message.answer(text, reply_markup=get_section_keyboard(section_name))

@dp.callback_query(F.data.startswith("schedule_"))
async def show_schedule(callback: types.CallbackQuery):
    section_name = callback.data[callback.data.find("_") + 1::].strip()
    print(section_name)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_text = get_latest_schedule(section_name)
    
    if not schedule_text:
        await callback.message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    else:
        await callback.message.answer(f"üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{schedule_text}")
    
    await callback.answer()

async def main():
    os.makedirs("texts", exist_ok=True)
    os.makedirs("images", exist_ok=True)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())