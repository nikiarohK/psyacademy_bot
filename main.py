import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    FSInputFile, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import BOT_TOKEN
import os
from database import get_schedules, get_schedule_by_id
from admin import admin_router
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
dp.include_router(admin_router)

class UserState(StatesGroup):
    WAITING_SECTION = State()

def load_section_text(section_name):
    try:
        file_path = os.path.join("texts", f"{section_name}.txt")
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        return f"–†–∞–∑–¥–µ–ª '{section_name}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

def get_section_keyboard(section_name):
    buttons = [
        [InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"register_{section_name}")],
        [InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"schedule_{section_name}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_main_keyboard():
    buttons = [
        [
            KeyboardButton(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
            KeyboardButton(text="üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"),
            KeyboardButton(text="üë• –ì—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤")
        ],
        [
            KeyboardButton(text="üè´ –ö—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö"),
            KeyboardButton(text="üé§ –õ–µ–∫—Ç–æ—Ä–∏–π"),
            KeyboardButton(text="üé¨ –ö–∏–Ω–æ–∫–ª—É–±")
        ],
        [
            KeyboardButton(text="üí¨ –ü—Å–∏—Ö. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"),
            KeyboardButton(text="üåê –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"),
            KeyboardButton(text="üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏")
        ],
        [
            KeyboardButton(text="üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"),
            KeyboardButton(text="üì© –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üë®üíº")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()
    photo = FSInputFile("images/logo.jpg")
    await message.answer_photo(
        photo,
        caption="""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫–∞–¥–µ–º–∏—é –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤, —Å—Ç—Ä–µ–º—è—â–∏—Ö—Å—è –∫ —Ä–æ—Å—Ç—É, –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é.\n\n–Ø ‚Äî –±–æ—Ç –ê–∫–∞–¥–µ–º–∏–∏.\n\n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!"""
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=get_main_keyboard())

@dp.message(F.text.in_([
    "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
    "üë• –ì—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", "üè´ –ö—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö", "üé§ –õ–µ–∫—Ç–æ—Ä–∏–π",
    "üé¨ –ö–∏–Ω–æ–∫–ª—É–±", "üí¨ –ü—Å–∏—Ö. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", "üåê –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
    "üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏", "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
]))
async def handle_any_section(message: types.Message, state: FSMContext):
    section_mapping = {
        "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è": "–±–ª–∏–∂–∞–π—à–∏–µ_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ_–ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "üë• –ì—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤": "–≥—Ä—É–ø–ø—ã_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "üè´ –ö—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö": "–∫—É—Ä—Å—ã_–¥–ª—è_–≤—Å–µ—Ö",
        "üé§ –õ–µ–∫—Ç–æ—Ä–∏–π": "–ª–µ–∫—Ç–æ—Ä–∏–π",
        "üé¨ –ö–∏–Ω–æ–∫–ª—É–±": "–∫–∏–Ω–æ–∫–ª—É–±",
        "üí¨ –ü—Å–∏—Ö. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏": "–ø—Å–∏—Ö_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        "üåê –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏": "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        "üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏": "–ø—Ä–æ–µ–∫—Ç—ã_–∞–∫–∞–¥–µ–º–∏–∏",
        "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞_–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    }
    
    section_name = section_mapping[message.text]
    text = load_section_text(section_name)
    await message.answer(text, reply_markup=get_section_keyboard(section_name))
    
@dp.callback_query(F.data.startswith("schedule_"))
async def show_schedule(callback: types.CallbackQuery, state: FSMContext):
    section_name = callback.data[len("schedule_"):].strip()
    schedules = get_schedules(section_name)
    
    if not schedules:
        await callback.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        data = await state.get_data()
        if "last_schedule_message_id" in data:
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=data["last_schedule_message_id"]
            )
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message = await callback.message.answer(
        "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞...", callback_data="loading")]])
    )
    
    await state.set_data({
        "current_index": 0,
        "schedules": schedules,
        "section_name": section_name,
        "last_schedule_message_id": new_message.message_id
    })
    
    await _show_current_schedule(new_message, state)
    await callback.answer()

async def _show_current_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_index = data["current_index"]
    schedules = data["schedules"]
    section_name = data["section_name"]
    
    schedule_id, schedule_text, details_text = schedules[current_index]
    total = len(schedules)
    
    keyboard_buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"nav_prev_{section_name}"),
            InlineKeyboardButton(text=f"{current_index + 1}/{total}", callback_data="nav_current"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"nav_next_{section_name}")
        ]
    ]
    
    if details_text:
        keyboard_buttons.append([InlineKeyboardButton(text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_details_{schedule_id}")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{section_name}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    try:
        await message.edit_text(
            f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({current_index + 1}/{total}):\n\n{schedule_text}",
            reply_markup=keyboard
        )
    except:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        await message.answer(
            f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({current_index + 1}/{total}):\n\n{schedule_text}",
            reply_markup=keyboard
        )
        
@dp.callback_query(F.data.startswith("nav_"))
async def navigate_schedules(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    if "current_index" not in data:
        data["current_index"] = 0
    if "schedules" not in data:
        section_name = callback.data.split("_")[-1]
        schedules = get_schedules(section_name)
        if not schedules:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
            return
        data["schedules"] = schedules
    if "section_name" not in data:
        data["section_name"] = callback.data.split("_")[-1]
    
    current_index = data["current_index"]
    schedules = data["schedules"]
    section_name = data["section_name"]
    total = len(schedules)
    
    action = callback.data.split("_")[1]
    
    if action == "prev":
        new_index = (current_index - 1) % total
    elif action == "next":
        new_index = (current_index + 1) % total
    else:
        await callback.answer()
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    try:
        if "last_schedule_message_id" in data:
            await bot.delete_message(
                chat_id=callback.message.chat.id,
                message_id=data["last_schedule_message_id"]
            )
    except:
        pass
    
    await state.update_data(current_index=new_index)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    new_message = await callback.message.answer(
        "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞...", callback_data="loading")]])
    )
    
    await state.update_data(last_schedule_message_id=new_message.message_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    await _show_current_schedule(new_message, state)
    await callback.answer()

async def _show_current_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    
    if "current_index" not in data:
        data["current_index"] = 0
    if "schedules" not in data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    if "section_name" not in data:
        await message.answer("–û—à–∏–±–∫–∞: —Ä–∞–∑–¥–µ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        return
    
    current_index = data["current_index"]
    schedules = data["schedules"]
    section_name = data["section_name"]
    
    schedule_id, schedule_text, details_text = schedules[current_index]
    total = len(schedules)
    
    keyboard_buttons = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"nav_prev_{section_name}"),
            InlineKeyboardButton(text=f"{current_index + 1}/{total}", callback_data="nav_current"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"nav_next_{section_name}")
        ]
    ]
    
    if details_text:
        keyboard_buttons.append([InlineKeyboardButton(text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_details_{schedule_id}")])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_{section_name}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –í—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.edit_text(
        f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({current_index + 1}/{total}):\n\n{schedule_text}",
        reply_markup=keyboard
    )

@dp.callback_query(F.data.startswith("view_details_"))
async def show_details(callback: types.CallbackQuery, state: FSMContext):
    schedule_id = int(callback.data[len("view_details_"):])
    schedule = get_schedule_by_id(schedule_id)
    
    if not schedule or not schedule[1]:
        await callback.answer("–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return
    
    schedule_text, details_text = schedule
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º schedule_id –≤ state –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    data = await state.get_data()
    await state.update_data({
        "current_schedule_id": schedule_id,
        "section_name": data.get("section_name", "")
    })
    
    await callback.message.answer(
        f"üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n\n{details_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", callback_data="back_to_schedule")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_schedule")
async def back_to_schedule(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    section_name = data.get("section_name", "")
    schedules = data.get("schedules", [])
    current_index = data.get("current_index", 0)
    
    if not schedules:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    schedule_id = data.get("current_schedule_id")
    if schedule_id:
        for i, (s_id, _, _) in enumerate(schedules):
            if s_id == schedule_id:
                current_index = i
                break
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
    try:
        await callback.message.delete()
    except:
        pass
    
    await state.update_data(current_index=current_index)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if "last_schedule_message_id" in data:
        try:
            msg = await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=data["last_schedule_message_id"],
                text="–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..."
            )
            await _show_current_schedule(msg, state)
        except:
            new_message = await callback.message.answer(
                "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞...", callback_data="loading")]])
            )
            await state.update_data(last_schedule_message_id=new_message.message_id)
            await _show_current_schedule(new_message, state)
    else:
        new_message = await callback.message.answer(
            "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∫–∞...", callback_data="loading")]])
        )
        await state.update_data(last_schedule_message_id=new_message.message_id)
        await _show_current_schedule(new_message, state)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("nav_back_"))
async def back_to_schedule(callback: types.CallbackQuery, state: FSMContext):
    await _show_current_schedule(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("back_to_"))
async def back_to_section(callback: types.CallbackQuery, state: FSMContext):
    section_name = callback.data[8:]  # –£–±–∏—Ä–∞–µ–º "back_to_"
    text = load_section_text(section_name)
    await callback.message.edit_text(text, reply_markup=get_section_keyboard(section_name))
    await state.clear()
    await callback.answer()

async def main():
    os.makedirs("texts", exist_ok=True)
    os.makedirs("images", exist_ok=True)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())