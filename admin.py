from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from config import ADMINS
from database import add_schedule, get_schedules, delete_schedule, update_schedule_details, get_schedule_by_id, delete_schedule_by_id, get_all_schedules

admin_router = Router()

class AdminStates(StatesGroup):
    ADD_SCHEDULE = State()
    EDIT_DETAILS = State()
    CONFIRM_DELETE = State()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def get_admin_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton(text="‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏")],
            [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_sections_keyboard(action: str):
    sections = [
        ("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "events"),
        ("üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "edu"),
        ("üë• –ì—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", "groups"),
        ("üè´ –ö—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö", "courses"),
        ("üé§ –õ–µ–∫—Ç–æ—Ä–∏–π", "lectures"),
        ("üé¨ –ö–∏–Ω–æ–∫–ª—É–±", "films"),
        ("üí¨ –ü—Å–∏—Ö. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", "consult"),
        ("üåê –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", "conf"),
        ("üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏", "projects"),
        ("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", "library")
    ]
    
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"admin_{action}:{section}")]
        for name, section in sections
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_section_name(section_code: str) -> str:
    section_map = {
        "events": "–±–ª–∏–∂–∞–π—à–∏–µ_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "edu": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ_–ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "groups": "–≥—Ä—É–ø–ø—ã_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "courses": "–∫—É—Ä—Å—ã_–¥–ª—è_–≤—Å–µ—Ö",
        "lectures": "–ª–µ–∫—Ç–æ—Ä–∏–π",
        "films": "–∫–∏–Ω–æ–∫–ª—É–±",
        "consult": "–ø—Å–∏—Ö_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        "conf": "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        "projects": "–ø—Ä–æ–µ–∫—Ç—ã_–∞–∫–∞–¥–µ–º–∏–∏",
        "library": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞_–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    }
    return section_map.get(section_code, section_code)

@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üë®üíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_keyboard()
    )

@admin_router.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="/start")]], resize_keyboard=True))

@admin_router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def add_schedule_handler(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_sections_keyboard("add")
    )

@admin_router.message(F.text == "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏")
async def manage_schedules_handler(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏:",
        reply_markup=get_sections_keyboard("manage")
    )

@admin_router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def delete_schedule_handler(message: types.Message, state: FSMContext):
    schedules = get_all_schedules()
    if not schedules:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    buttons = []
    for schedule_id, section_name, schedule_text in schedules:
        short_text = schedule_text[:30] + "..." if len(schedule_text) > 30 else schedule_text
        buttons.append(
            [InlineKeyboardButton(
                text=f"{section_name}: {short_text}", 
                callback_data=f"delete_{schedule_id}"
            )]
        )
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )

@admin_router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "üë®üíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_keyboard()
    )
    try:
        await callback.message.delete()
    except:
        pass
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_add:"))
async def admin_add_schedule_section(callback: types.CallbackQuery, state: FSMContext):
    section_code = callback.data.split(":")[1]
    section_name = get_section_name(section_code)
    
    await state.set_state(AdminStates.ADD_SCHEDULE)
    await state.update_data(section_name=section_name)
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ {section_name}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
        ])
    )
    await callback.answer()

@admin_router.message(AdminStates.ADD_SCHEDULE)
async def admin_save_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    section_name = data.get("section_name")
    
    add_schedule(section_name, message.text)
    await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_admin_main_keyboard())
    await state.clear()

@admin_router.callback_query(F.data.startswith("admin_manage:"))
async def admin_show_schedules(callback: types.CallbackQuery, state: FSMContext):
    section_code = callback.data.split(":")[1]
    section_name = get_section_name(section_code)
    schedules = get_schedules(section_name)
    
    if not schedules:
        await callback.answer("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞")
        return
    
    buttons = []
    for schedule_id, schedule_text, details_text in schedules:
        short_text = schedule_text[:30] + "..." if len(schedule_text) > 30 else schedule_text
        row = [
            InlineKeyboardButton(text=f"üóëÔ∏è {short_text}", callback_data=f"admin_delete:{schedule_id}"),
            InlineKeyboardButton(text="‚úèÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"admin_edit:{schedule_id}")
        ]
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await callback.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ {section_name}:\n\n"
        "üóëÔ∏è - —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚úèÔ∏è - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_edit:"))
async def admin_edit_details(callback: types.CallbackQuery, state: FSMContext):
    schedule_id = int(callback.data.split(":")[1])
    schedule = get_schedule_by_id(schedule_id)
    
    if not schedule:
        await callback.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    schedule_text, details_text = schedule
    
    await state.set_state(AdminStates.EDIT_DETAILS)
    await state.update_data({
        "schedule_id": schedule_id,
        "current_details": details_text
    })
    
    message_text = f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{schedule_text}\n\n"
    if details_text:
        message_text += f"–¢–µ–∫—É—â–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:\n{details_text}\n\n"
    message_text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:"
    
    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"admin_back")]
        ])
    )
    await callback.answer()

@admin_router.message(AdminStates.EDIT_DETAILS)
async def admin_save_details(message: types.Message, state: FSMContext):
    data = await state.get_data()
    schedule_id = data.get("schedule_id")
    new_details = message.text if message.text != "-" else None
    
    update_schedule_details(schedule_id, new_details)
    await message.answer("‚úÖ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_admin_main_keyboard())
    await state.clear()

@admin_router.callback_query(F.data.startswith("admin_delete:"))
async def admin_delete_schedule(callback: types.CallbackQuery):
    schedule_id = int(callback.data.split(":")[1])
    delete_schedule(schedule_id)
    await callback.message.edit_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("delete_"))
async def select_schedule_to_delete(callback: types.CallbackQuery, state: FSMContext):
    schedule_id = int(callback.data.split("_")[1])
    await state.set_state(AdminStates.CONFIRM_DELETE)
    await state.update_data(schedule_id=schedule_id)
    
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="admin_back")]
        ])
    )
    await callback.answer()

@admin_router.callback_query(F.data == "confirm_delete", AdminStates.CONFIRM_DELETE)
async def confirm_delete(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    schedule_id = data.get("schedule_id")
    
    delete_schedule_by_id(schedule_id)
    await callback.message.edit_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    await state.clear()
    await callback.answer()