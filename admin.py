from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMINS
from database import add_schedule, get_schedules_count, get_schedules_page, delete_schedule

admin_router = Router()

class AdminStates(StatesGroup):
    ADD_SCHEDULE = State()

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def get_admin_main_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data="admin_schedule")],
        [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_add")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin_delete")]
    ])

def get_admin_sections_keyboard(action: str):
    sections = [
        ("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "events"),
        ("üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "edu"),
        ("üë• –ì—Ä—É–ø–ø—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", "groups"),
        ("üè´ –ö—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö", "courses"),
        ("üé§ –õ–µ–∫—Ç–æ—Ä–∏–π", "lectures"),
        ("üé¨ –ö–∏–Ω–æ–∫–ª—É–±", "films"),
        ("üí¨ –ü—Å–∏—Ö. –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", "consult"),
        ("üåê –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", "conf"),
        ("üöÄ –ü—Ä–æ–µ–∫—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏", "projects"),
        ("üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", "library")
    ]
    
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"admin_{action}:{section}")]
        for name, section in sections
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@admin_router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "üë®üíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_keyboard()
    )

@admin_router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üë®üíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_keyboard()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_schedule")
async def admin_schedule(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_admin_sections_keyboard("view")
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_view:"))
async def admin_view_schedule(callback: types.CallbackQuery):
    section_code = callback.data.split(":")[1]
    section_map = {
        "events": "–±–ª–∏–∂–∞–π—à–∏–µ_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "edu": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ_–ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "groups": "–≥—Ä—É–ø–ø—ã_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "courses": "–∫—É—Ä—Å—ã_–¥–ª—è_–≤—Å–µ—Ö",
        "lectures": "–ª–µ–∫—Ç–æ—Ä–∏–π",
        "films": "–∫–∏–Ω–æ–∫–ª—É–±",
        "consult": "–ø—Å–∏—Ö_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        "conf": "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        "projects": "–ø—Ä–æ–µ–∫—Ç—ã_–∞–∫–∞–¥–µ–º–∏–∏",
        "library": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞_–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    }
    section_name = section_map.get(section_code)
    total_schedules = get_schedules_count(section_name)
    
    if total_schedules == 0:
        await callback.message.edit_text(
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_schedule")]
            ])
        )
        await callback.answer()
        return
    
    await show_admin_schedule_page(callback.message, section_name, section_code, 1)
    await callback.answer()

async def show_admin_schedule_page(message: types.Message, section_name: str, section_code: str, page: int):
    total_schedules = get_schedules_count(section_name)
    schedule_id, schedule_text = get_schedules_page(section_name, page)
    
    keyboard = []
    
    if page > 1:
        keyboard.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"admin_view_page:{section_code}:{page-1}"
        ))
    
    if page < total_schedules:
        keyboard.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"admin_view_page:{section_code}:{page+1}"
        ))
    
    keyboard.append(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_schedule"
    ))
    
    await message.edit_text(
        f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({page}/{total_schedules}):\n\nID: {schedule_id}\n{schedule_text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[keyboard])
    )

@admin_router.callback_query(F.data.startswith("admin_view_page:"))
async def handle_admin_schedule_page(callback: types.CallbackQuery):
    _, section_code, page_str = callback.data.split(":")
    section_map = {
        "events": "–±–ª–∏–∂–∞–π—à–∏–µ_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "edu": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ_–ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "groups": "–≥—Ä—É–ø–ø—ã_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "courses": "–∫—É—Ä—Å—ã_–¥–ª—è_–≤—Å–µ—Ö",
        "lectures": "–ª–µ–∫—Ç–æ—Ä–∏–π",
        "films": "–∫–∏–Ω–æ–∫–ª—É–±",
        "consult": "–ø—Å–∏—Ö_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        "conf": "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        "projects": "–ø—Ä–æ–µ–∫—Ç—ã_–∞–∫–∞–¥–µ–º–∏–∏",
        "library": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞_–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    }
    section_name = section_map.get(section_code)
    await show_admin_schedule_page(callback.message, section_name, section_code, int(page_str))
    await callback.answer()

@admin_router.callback_query(F.data == "admin_add")
async def admin_add_schedule_start(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_admin_sections_keyboard("add")
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_add:"))
async def admin_add_schedule_section(callback: types.CallbackQuery, state: FSMContext):
    section_code = callback.data.split(":")[1]
    section_map = {
        "events": "–±–ª–∏–∂–∞–π—à–∏–µ_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "edu": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ_–ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "groups": "–≥—Ä—É–ø–ø—ã_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "courses": "–∫—É—Ä—Å—ã_–¥–ª—è_–≤—Å–µ—Ö",
        "lectures": "–ª–µ–∫—Ç–æ—Ä–∏–π",
        "films": "–∫–∏–Ω–æ–∫–ª—É–±",
        "consult": "–ø—Å–∏—Ö_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        "conf": "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        "projects": "–ø—Ä–æ–µ–∫—Ç—ã_–∞–∫–∞–¥–µ–º–∏–∏",
        "library": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞_–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    }
    section_name = section_map.get(section_code)
    
    await state.set_state(AdminStates.ADD_SCHEDULE)
    await state.update_data(section_name=section_name)
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ {section_name}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_add")]
        ])
    )
    await callback.answer()

@admin_router.message(AdminStates.ADD_SCHEDULE)
async def admin_save_schedule(message: types.Message, state: FSMContext):
    data = await state.get_data()
    section_name = data.get("section_name")
    
    add_schedule(section_name, message.text)
    await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await state.clear()

@admin_router.callback_query(F.data == "admin_delete")
async def admin_delete_schedule_start(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=get_admin_sections_keyboard("delete")
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_delete:"))
async def admin_delete_schedule_section(callback: types.CallbackQuery):
    section_code = callback.data.split(":")[1]
    section_map = {
        "events": "–±–ª–∏–∂–∞–π—à–∏–µ_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "edu": "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ_–ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "groups": "–≥—Ä—É–ø–ø—ã_—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
        "courses": "–∫—É—Ä—Å—ã_–¥–ª—è_–≤—Å–µ—Ö",
        "lectures": "–ª–µ–∫—Ç–æ—Ä–∏–π",
        "films": "–∫–∏–Ω–æ–∫–ª—É–±",
        "consult": "–ø—Å–∏—Ö_–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏",
        "conf": "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏",
        "projects": "–ø—Ä–æ–µ–∫—Ç—ã_–∞–∫–∞–¥–µ–º–∏–∏",
        "library": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞_–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    }
    section_name = section_map.get(section_code)
    schedules = get_schedules_page(section_name, 1, 100)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    
    if not schedules:
        await callback.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    buttons = [
        [InlineKeyboardButton(text=f"ID: {id} - {text[:20]}...", callback_data=f"admin_confirm:{id}")]
        for id, text in schedules
    ]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_delete")])
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm:"))
async def admin_confirm_delete(callback: types.CallbackQuery):
    schedule_id = int(callback.data.split(":")[1])
    delete_schedule(schedule_id)
    await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    await callback.answer()